 private val apiKey = "AIzaSyAOVYRIgupAurZup5y1PRh8Ismb1A3lLao"
 
 
 package com.example.CoinWatch

import android.Manifest
import android.content.Intent
import android.content.pm.PackageManager
import android.location.Geocoder
import android.location.Location
import android.os.Bundle
import android.view.View
import android.widget.*
import android.annotation.SuppressLint

import androidx.appcompat.app.AppCompatActivity
import androidx.core.app.ActivityCompat
import com.android.volley.Request
import com.android.volley.toolbox.StringRequest
import com.android.volley.toolbox.Volley
import com.google.android.gms.location.FusedLocationProviderClient
import com.google.android.gms.location.LocationServices
import com.google.android.gms.maps.CameraUpdateFactory
import com.google.android.gms.maps.GoogleMap
import com.google.android.gms.maps.OnMapReadyCallback
import com.google.android.gms.maps.SupportMapFragment
import com.google.android.gms.maps.model.LatLng
import com.google.android.gms.maps.model.MarkerOptions
import com.google.android.libraries.places.api.Places
import com.google.android.libraries.places.api.net.PlacesClient
import org.json.JSONObject
import java.util.*

class ATMLocatorActivity : AppCompatActivity(), OnMapReadyCallback {

    private lateinit var mMap: GoogleMap
    private lateinit var fusedLocationClient: FusedLocationProviderClient
    private lateinit var progressBar: ProgressBar
    private val apiKey = "AIzaSyAOVYRIgupAurZup5y1PRh8Ismb1A3lLao"
    private val LOCATION_PERMISSION_REQUEST_CODE = 1

    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        setContentView(R.layout.activity_atm_locator)

        progressBar = findViewById(R.id.progressBar)

        if (!Places.isInitialized()) {
            Places.initialize(applicationContext, apiKey)
        }

        fusedLocationClient = LocationServices.getFusedLocationProviderClient(this)
        val mapFragment = supportFragmentManager.findFragmentById(R.id.map) as SupportMapFragment
        mapFragment.getMapAsync(this)

        findViewById<ImageButton>(R.id.imageButtonBack).setOnClickListener {
            startActivity(Intent(this, HomeScreen::class.java))
            finish()
        }

        findViewById<Button>(R.id.btnSearch).setOnClickListener {
            val query = findViewById<EditText>(R.id.searchBar).text.toString().trim()
            if (query.isNotEmpty()) {
                mMap.clear()
                searchLocationAndFindATMs(query)
            } else {
                Toast.makeText(this, "Please enter a location.", Toast.LENGTH_SHORT).show()
            }
        }

        findViewById<Button>(R.id.btnRefresh).setOnClickListener {
            mMap.clear()
            getLastLocationAndFindATMs()
        }
    }

    override fun onMapReady(googleMap: GoogleMap) {
        mMap = googleMap
        enableMyLocation()
    }

    private fun enableMyLocation() {
        if (ActivityCompat.checkSelfPermission(this, Manifest.permission.ACCESS_FINE_LOCATION)
            != PackageManager.PERMISSION_GRANTED
        ) {
            ActivityCompat.requestPermissions(
                this,
                arrayOf(Manifest.permission.ACCESS_FINE_LOCATION),
                LOCATION_PERMISSION_REQUEST_CODE
            )
        } else {
            mMap.isMyLocationEnabled = true
            getLastLocationAndFindATMs()
        }
    }

    @Deprecated("Deprecated in Java")
    override fun onRequestPermissionsResult(
        requestCode: Int,
        permissions: Array<String>,
        grantResults: IntArray
    ) {
        super.onRequestPermissionsResult(requestCode, permissions, grantResults)

        if (requestCode == LOCATION_PERMISSION_REQUEST_CODE &&
            grantResults.isNotEmpty() &&
            grantResults[0] == PackageManager.PERMISSION_GRANTED
        ) {
            enableMyLocation()
        } else {
            Toast.makeText(this, "Location permission denied.", Toast.LENGTH_SHORT).show()
        }
    }


    private fun getLastLocationAndFindATMs() {
        if (ActivityCompat.checkSelfPermission(this, Manifest.permission.ACCESS_FINE_LOCATION)
            != PackageManager.PERMISSION_GRANTED
        ) return

        progressBar.visibility = View.VISIBLE
        fusedLocationClient.lastLocation.addOnSuccessListener { location ->
            if (location != null) {
                val userLocation = LatLng(location.latitude, location.longitude)
                mMap.moveCamera(CameraUpdateFactory.newLatLngZoom(userLocation, 15f))
                fetchATMs(userLocation)
            } else {
                progressBar.visibility = View.GONE
                Toast.makeText(this, "Unable to get current location.", Toast.LENGTH_SHORT).show()
            }
        }
    }

    private fun fetchATMs(location: LatLng) {
        val radius = 2000
        val type = "atm"
        val url = "https://maps.googleapis.com/maps/api/place/nearbysearch/json?location=${location.latitude},${location.longitude}&radius=$radius&type=$type&key=$apiKey"

        val queue = Volley.newRequestQueue(this)
        val request = StringRequest(Request.Method.GET, url,
            { response ->
                progressBar.visibility = View.GONE
                val results = JSONObject(response).getJSONArray("results")

                for (i in 0 until results.length()) {
                    val place = results.getJSONObject(i)
                    val name = place.optString("name", "ATM")
                    val vicinity = place.optString("vicinity", "Unknown")
                    val loc = place.getJSONObject("geometry").getJSONObject("location")
                    val latLng = LatLng(loc.getDouble("lat"), loc.getDouble("lng"))

                    val resultDistance = FloatArray(1)
                    Location.distanceBetween(
                        location.latitude, location.longitude,
                        latLng.latitude, latLng.longitude,
                        resultDistance
                    )
                    val distanceText = String.format("%.1f m", resultDistance[0])

                    mMap.addMarker(
                        MarkerOptions().position(latLng).title(name).snippet("$vicinity\n$distanceText")
                    )?.tag = "$vicinity|$distanceText"
                }

                mMap.setOnInfoWindowClickListener { marker ->
                    val (vicinity, distance) = (marker.tag as? String)?.split("|") ?: listOf("N/A", "N/A")
                    Toast.makeText(this, "${marker.title}\n$vicinity\n$distance", Toast.LENGTH_SHORT).show()
                }

                if (results.length() == 0) {
                    Toast.makeText(this, "No ATMs found nearby.", Toast.LENGTH_SHORT).show()
                }

            }, { error ->
                progressBar.visibility = View.GONE
                Toast.makeText(this, "Error fetching ATMs: ${error.message}", Toast.LENGTH_LONG).show()
            })

        queue.add(request)
    }

    private fun searchLocationAndFindATMs(query: String) {
        try {
            val geocoder = Geocoder(this, Locale.getDefault())
            val addresses = geocoder.getFromLocationName(query, 1)
            if (!addresses.isNullOrEmpty()) {
                val location = LatLng(addresses[0].latitude, addresses[0].longitude)
                mMap.moveCamera(CameraUpdateFactory.newLatLngZoom(location, 15f))
                fetchATMs(location)
            } else {
                Toast.makeText(this, "Location not found.", Toast.LENGTH_SHORT).show()
            }
        } catch (e: Exception) {
            Toast.makeText(this, "Search failed: ${e.message}", Toast.LENGTH_SHORT).show()
        }
    }
}


<?xml version="1.0" encoding="utf-8"?>
<FrameLayout xmlns:android="http://schemas.android.com/apk/res/android"
    android:layout_width="match_parent"
    android:layout_height="match_parent">

    <!-- Map Fragment -->
    <fragment
        android:id="@+id/map"
        android:name="com.google.android.gms.maps.SupportMapFragment"
        android:layout_width="match_parent"
        android:layout_height="match_parent" />

    <!-- Top panel with title and search -->
    <LinearLayout
        android:orientation="vertical"
        android:layout_width="match_parent"
        android:layout_height="wrap_content"
        android:padding="16dp"
        android:background="#CCFFFFFF"
        android:elevation="8dp"
        android:layout_gravity="top">

        <TextView
            android:id="@+id/atmTitle"
            android:layout_width="wrap_content"
            android:layout_height="wrap_content"
            android:text="Find an ATM"
            android:textColor="#000000"
            android:textSize="20sp"
            android:textStyle="bold" />

        <LinearLayout
            android:layout_width="match_parent"
            android:layout_height="wrap_content"
            android:layout_marginTop="8dp"
            android:orientation="horizontal">

            <EditText
                android:id="@+id/searchBar"
                android:layout_width="0dp"
                android:layout_height="40dp"
                android:layout_weight="1"
                android:hint="Search location..."
                android:background="@android:drawable/edit_text"
                android:padding="10dp" />

            <Button
                android:id="@+id/btnSearch"
                android:layout_width="wrap_content"
                android:layout_height="40dp"
                android:layout_marginStart="8dp"
                android:text="Search"
                android:backgroundTint="#03A9F4"
                android:textColor="#FFFFFF" />
        </LinearLayout>
    </LinearLayout>

    <!-- Refresh Button -->
    <Button
        android:id="@+id/btnRefresh"
        android:text="â†»"
        android:layout_width="40dp"
        android:layout_height="40dp"
        android:layout_gravity="top|end"
        android:layout_margin="16dp"
        android:backgroundTint="#6200EE"
        android:textColor="#FFFFFF"
        android:textSize="18sp" />

    <!-- Back Button -->
    <ImageButton
        android:id="@+id/imageButtonBack"
        android:layout_width="48dp"
        android:layout_height="48dp"
        android:layout_gravity="bottom|start"
        android:layout_margin="16dp"
        android:background="@android:drawable/ic_menu_revert"
        android:contentDescription="Back" />

    <!-- Loading Spinner -->
    <ProgressBar
        android:id="@+id/progressBar"
        android:layout_gravity="center"
        android:layout_width="wrap_content"
        android:layout_height="wrap_content"
        android:visibility="gone" />
</FrameLayout>
